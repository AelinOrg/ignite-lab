{"version":3,"file":"index.51593ed5.js","sources":["../../src/components/Text/index.tsx"],"sourcesContent":["import { Slot } from \"@radix-ui/react-slot\";\nimport { clsx } from \"clsx\";\nimport { ReactNode } from \"react\";\n\nexport interface TextProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  children?: ReactNode;\n  asChild?: boolean;\n}\n\nexport function Text({ size = \"md\", children, asChild = false }: TextProps) {\n  /**\n   * Por que não aceitar uma string como children, assim como fizemos\n   * com o `span`? O `Slot` nos permite repassar os estilos do pai\n   * para o filho, e isso é muito útil para estilizar\n   */\n  const Component = asChild ? Slot : \"span\";\n\n  return (\n    <Component\n      className={clsx(\"text-gray-100\", {\n        /**\n         * Usamos essa abordagem para demonstrar como o clsx pode ser usado,\n         * mas poderíamos ter usado `text-${size}` e teríamos o mesmo resultado.\n         */\n        \"text-sm\": size === \"sm\",\n        \"text-md\": size === \"md\",\n        \"text-lg\": size === \"lg\",\n      })}\n    >\n      {children}\n    </Component>\n  );\n}\n"],"names":["Text","size","children","_jsx","asChild","Slot","clsx","__name"],"mappings":"qNAUO,SAAAA,EAAA,CAAc,KAAAC,EAAA,KAAS,SAAAC,EAAMA,QAAAA,EAAAA,EAAqC,EAAA,CAQvE,OAAAC,EAFAC,EAAAC,EAAA,OAEA,CACY,UAAAC,EAAA,gBAAA,CACyB,UAAAL,IAAA,KAKX,UAAAA,IAAA,KACA,UAAAA,IAAA,IACA,CAAA,EACrB,SAAAC,CAAE,CAAA,CAKT,CAvBOK,EAAAP,EAAA"}